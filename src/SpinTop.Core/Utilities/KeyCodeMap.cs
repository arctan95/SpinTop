using System.Collections.Generic;
using Avalonia.Input;
using SharpHook.Native;

namespace SpinTop.Core.Utilities;

public class KeyCodeMap
{
    public static readonly Dictionary<KeyCode, Key> Map = new()
    {
        [KeyCode.VcEscape] = Key.Escape,
        [KeyCode.VcF1] = Key.F1,
        [KeyCode.VcF2] = Key.F2,
        [KeyCode.VcF3] = Key.F3,
        [KeyCode.VcF4] = Key.F4,
        [KeyCode.VcF5] = Key.F5,
        [KeyCode.VcF6] = Key.F6,
        [KeyCode.VcF7] = Key.F7,
        [KeyCode.VcF8] = Key.F8,
        [KeyCode.VcF9] = Key.F9,
        [KeyCode.VcF10] = Key.F10,
        [KeyCode.VcF11] = Key.F11,
        [KeyCode.VcF12] = Key.F12,
        [KeyCode.VcF13] = Key.F13,
        [KeyCode.VcF14] = Key.F14,
        [KeyCode.VcF15] = Key.F15,
        [KeyCode.VcF16] = Key.F16,
        [KeyCode.VcF17] = Key.F17,
        [KeyCode.VcF18] = Key.F18,
        [KeyCode.VcF19] = Key.F19,
        [KeyCode.VcF20] = Key.F20,
        [KeyCode.VcF21] = Key.F21,
        [KeyCode.VcF22] = Key.F22,
        [KeyCode.VcF23] = Key.F23,
        [KeyCode.VcF24] = Key.F24,
        [KeyCode.VcBackQuote] = Key.Oem3,
        [KeyCode.Vc0] = Key.D0,
        [KeyCode.Vc1] = Key.D1,
        [KeyCode.Vc2] = Key.D2,
        [KeyCode.Vc3] = Key.D3,
        [KeyCode.Vc4] = Key.D4,
        [KeyCode.Vc5] = Key.D5,
        [KeyCode.Vc6] = Key.D6,
        [KeyCode.Vc7] = Key.D7,
        [KeyCode.Vc8] = Key.D8,
        [KeyCode.Vc9] = Key.D9,
        [KeyCode.VcMinus] = Key.OemMinus,
        [KeyCode.VcEquals] = Key.OemPlus,
        [KeyCode.VcBackspace] = Key.Back,
        [KeyCode.VcTab] = Key.Tab,
        [KeyCode.VcCapsLock] = Key.Capital,
        [KeyCode.VcA] = Key.A,
        [KeyCode.VcB] = Key.B,
        [KeyCode.VcC] = Key.C,
        [KeyCode.VcD] = Key.D,
        [KeyCode.VcE] = Key.E,
        [KeyCode.VcF] = Key.F,
        [KeyCode.VcG] = Key.G,
        [KeyCode.VcH] = Key.H,
        [KeyCode.VcI] = Key.I,
        [KeyCode.VcJ] = Key.J,
        [KeyCode.VcK] = Key.K,
        [KeyCode.VcL] = Key.L,
        [KeyCode.VcM] = Key.M,
        [KeyCode.VcN] = Key.N,
        [KeyCode.VcO] = Key.O,
        [KeyCode.VcP] = Key.P,
        [KeyCode.VcQ] = Key.Q,
        [KeyCode.VcR] = Key.R,
        [KeyCode.VcS] = Key.S,
        [KeyCode.VcT] = Key.T,
        [KeyCode.VcU] = Key.U,
        [KeyCode.VcV] = Key.V,
        [KeyCode.VcW] = Key.W,
        [KeyCode.VcX] = Key.X,
        [KeyCode.VcY] = Key.Y,
        [KeyCode.VcZ] = Key.Z,
        [KeyCode.VcOpenBracket] = Key.Oem4,
        [KeyCode.VcCloseBracket] = Key.OemCloseBrackets,
        [KeyCode.VcBackslash] = Key.OemPipe,
        [KeyCode.VcSemicolon] = Key.OemSemicolon,
        [KeyCode.VcQuote] = Key.OemQuotes,
        [KeyCode.VcEnter] = Key.Enter,
        [KeyCode.VcComma] = Key.OemComma,
        [KeyCode.VcPeriod] = Key.OemPeriod,
        [KeyCode.VcSlash] = Key.Oem2,
        [KeyCode.VcSpace] = Key.Space,
        [KeyCode.VcPrintScreen] = Key.PrintScreen,
        [KeyCode.VcScrollLock] = Key.Scroll,
        [KeyCode.VcPause] = Key.Pause,
        [KeyCode.VcCancel] = Key.Cancel,
        [KeyCode.VcHelp] = Key.Help,
        [KeyCode.VcInsert] = Key.Insert,
        [KeyCode.VcDelete] = Key.Delete,
        [KeyCode.VcHome] = Key.Home,
        [KeyCode.VcEnd] = Key.End,
        [KeyCode.VcPageUp] = Key.PageUp,
        [KeyCode.VcPageDown] = Key.PageDown,
        [KeyCode.VcUp] = Key.Up,
        [KeyCode.VcLeft] = Key.Left,
        [KeyCode.VcRight] = Key.Right,
        [KeyCode.VcDown] = Key.Down,
        [KeyCode.VcNumLock] = Key.NumLock,
        [KeyCode.VcNumPadClear] = Key.Clear,
        [KeyCode.VcNumPadDivide] = Key.Divide,
        [KeyCode.VcNumPadMultiply] = Key.Multiply,
        [KeyCode.VcNumPadSubtract] = Key.Subtract,
        [KeyCode.VcNumPadEquals] = Key.OemPlus,
        [KeyCode.VcNumPadAdd] = Key.Add,
        [KeyCode.VcNumPadEnter] = Key.Enter,
        [KeyCode.VcNumPadDecimal] = Key.Decimal,
        [KeyCode.VcNumPadSeparator] = Key.Separator,
        [KeyCode.VcNumPad0] = Key.NumPad0,
        [KeyCode.VcNumPad1] = Key.NumPad1,
        [KeyCode.VcNumPad2] = Key.NumPad2,
        [KeyCode.VcNumPad3] = Key.NumPad3,
        [KeyCode.VcNumPad4] = Key.NumPad4,
        [KeyCode.VcNumPad5] = Key.NumPad5,
        [KeyCode.VcNumPad6] = Key.NumPad6,
        [KeyCode.VcNumPad7] = Key.NumPad7,
        [KeyCode.VcNumPad8] = Key.NumPad8,
        [KeyCode.VcNumPad9] = Key.NumPad9,
        [KeyCode.VcLeftShift] = Key.LeftShift,
        [KeyCode.VcRightShift] = Key.RightShift,
        [KeyCode.VcLeftControl] = Key.LeftCtrl,
        [KeyCode.VcRightControl] = Key.RightCtrl,
        [KeyCode.VcLeftAlt] = Key.LeftAlt,
        [KeyCode.VcRightAlt] = Key.RightAlt,
        [KeyCode.VcLeftMeta] = Key.LWin,
        [KeyCode.VcRightMeta] = Key.RWin,
        [KeyCode.VcContextMenu] = Key.Apps,
        [KeyCode.VcChangeInputSource] = Key.ImeModeChange,
        [KeyCode.VcSleep] = Key.Sleep,
        [KeyCode.VcMediaPlay] = Key.MediaPlayPause,
        [KeyCode.VcMediaStop] = Key.MediaStop,
        [KeyCode.VcMediaPrevious] = Key.MediaPreviousTrack,
        [KeyCode.VcMediaNext] = Key.MediaNextTrack,
        [KeyCode.VcMediaSelect] = Key.SelectMedia,
        [KeyCode.VcMediaEject] = Key.MediaStop,
        [KeyCode.VcVolumeMute] = Key.VolumeMute,
        [KeyCode.VcVolumeDown] = Key.VolumeDown,
        [KeyCode.VcVolumeUp] = Key.VolumeUp,
        [KeyCode.VcApp1] = Key.LaunchApplication1,
        [KeyCode.VcApp2] = Key.LaunchApplication2,
        [KeyCode.VcAppMail] = Key.LaunchMail,
        [KeyCode.VcBrowserSearch] = Key.BrowserSearch,
        [KeyCode.VcBrowserHome] = Key.BrowserHome,
        [KeyCode.VcBrowserBack] = Key.BrowserBack,
        [KeyCode.VcBrowserForward] = Key.BrowserForward,
        [KeyCode.VcBrowserStop] = Key.BrowserStop,
        [KeyCode.VcBrowserRefresh] = Key.BrowserRefresh,
        [KeyCode.VcBrowserFavorites] = Key.BrowserFavorites
    };
    
    // currently not in use
    // public static readonly Dictionary<Key, KeyCode> MapReverse = Reverse(Map);

    private static Dictionary<TV, TK> Reverse<TK, TV>(Dictionary<TK, TV> oldDict) where TV : notnull where TK : notnull
    {
        var newDict = new Dictionary<TV, TK>();
        foreach (var (key, value) in oldDict)
        {
            newDict.TryAdd(value, key);
        }

        return newDict;
    }
}